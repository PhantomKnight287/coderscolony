// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @unique @default(cuid())
  email         String          @unique
  name          String
  username      String          @unique
  password      String
  bannerColor   String?
  // a link to cdn
  bannerImage   String?
  // a link to cdn or dicebar avatar
  profileImage  String?
  notifications Notifications[]
  verified      Boolean         @default(false)
  forums        ForumMember[]
  saved         Saved[]
  Posts         Posts[]
}

model Notifications {
  id         String               @id @unique @default(cuid())
  title      String
  content    String
  read       Boolean              @default(false)
  createdAt  DateTime             @default(now())
  variant    NotificationVariants @default(Neutral)
  urlToVisit String?
  User       User?                @relation(fields: [userId], references: [id])
  userId     String?
}

enum NotificationVariants {
  Error
  Warnings
  Neutral
}

model Forums {
  id           String        @id @unique @default(cuid())
  name         String
  urlSlug      String        @unique
  description  String?
  profileImage String?
  bannerImage  String?
  forumMembers ForumMember[]
  createdAt    DateTime      @default(now())
  saves        Saved[]
  posts        Posts[]
}

model ForumMember {
  id       String           @id @unique @default(cuid())
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum    Forums           @relation(fields: [forumsId], references: [id], onDelete: Cascade)
  role     ForumMemberRoles
  userId   String
  forumsId String
}

enum ForumMemberRoles {
  USER
  ADMIN
  MODERATOR
}

enum SavedVariants {
  FORUM
  USER
  POST
}

model Saved {
  id       String        @id @unique @default(cuid())
  User     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  variant  SavedVariants
  forum    Forums?       @relation(fields: [forumsId], references: [id], onDelete: Cascade)
  forumsId String?
}

model Posts {
  id        String   @id @unique @default(cuid())
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  slug      String
  createdAt DateTime @default(now())
  Forums    Forums   @relation(fields: [forumsId], references: [id], onDelete: Cascade)
  forumsId  String
  likedBy   String[] @default([])
}
